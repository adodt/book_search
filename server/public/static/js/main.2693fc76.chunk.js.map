{"version":3,"sources":["utils/mutations.js","utils/auth.js","utils/localStorage.js","pages/SearchBooks.js","utils/API.js","utils/queries.js","pages/SavedBooks.js","components/SignupForm.js","components/LoginForm.js","components/Navbar.js","App.js","index.js"],"names":["LOGIN_USER","gql","ADD_USER","SAVE_BOOK","REMOVE_BOOK","decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","window","location","assign","removeItem","removeBookId","bookId","savedBookIds","JSON","parse","updatedSavedBookIds","filter","savedBookId","stringify","SearchBooks","useState","searchedBooks","setSearchedBooks","searchInput","setSearchInput","useMutation","saveBook","setSavedBookIds","useEffect","bookIdArr","length","handleFormSubmit","event","preventDefault","fetch","response","ok","Error","json","items","bookData","map","book","id","authors","volumeInfo","title","description","image","imageLinks","thumbnail","console","error","handleSaveBook","bookToSave","find","Auth","loggedIn","Jumbotron","fluid","className","Container","Form","onSubmit","Row","Col","xs","md","Control","name","value","onChange","e","target","type","size","placeholder","Button","variant","CardColumns","Card","border","Img","src","alt","Body","Title","Text","disabled","some","onClick","GET_ME","SavedBooks","useQuery","loading","data","userData","me","removeBook","handleDeleteBook","variables","savedBooks","SignupForm","username","email","password","userFormData","setUserFormData","validated","showAlert","setShowAlert","addUser","handleInputChange","currentTarget","checkValidity","stopPropagation","login","noValidate","Alert","dismissible","onClose","show","Group","Label","htmlFor","required","Feedback","LoginForm","AppNavbar","showModal","setShowModal","Navbar","bg","expand","Brand","as","Link","to","Toggle","Collapse","Nav","logout","Modal","onHide","Tab","defaultActiveKey","Header","closeButton","Item","eventKey","Content","Pane","handleModalClose","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","App","ApolloProvider","path","element","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2693fc76.chunk.js","sourcesContent":["import { gql } from \"@apollo/client\";\n\nexport const LOGIN_USER = gql`\n  mutation login($email: String, $password: String) {\n    login(email: $email, password: $password) {\n      token\n      user {\n        _id\n        username\n      }\n    }\n  }\n`;\n\nexport const ADD_USER = gql`\n  mutation addUser($username: String!, $email: String!, $password: String!) {\n    addUser(username: $username, email: $email, password: $password) {\n      token\n      user {\n        _id\n        username\n      }\n    }\n  }\n`;\n\nexport const SAVE_BOOK = gql`\n  mutation saveBook(\n    $bookId: String\n    $authors: [String]\n    $description: String\n    $title: String\n    $image: String\n    $link: String\n  ) {\n    saveBook(\n      bookId: $bookId\n      authors: $authors\n      description: $description\n      title: $title\n      image: $image\n      link: $link\n    ) {\n      _id\n      username\n      email\n      bookCount\n      savedBooks {\n        bookId\n        authors\n        description\n        title\n        image\n        link\n      }\n    }\n  }\n`;\n\nexport const REMOVE_BOOK = gql`\n  mutation removeBook($bookId: String!) {\n    removeBook(bookId: $bookId) {\n      _id\n      username\n      bookCount\n      savedBooks {\n        bookId\n        authors\n        description\n        title\n        image\n        link\n      }\n    }\n  }\n`;","// use this to decode a token and get the user's information out of it\nimport decode from 'jwt-decode';\n\n// create a new class to instantiate for a user\nclass AuthService {\n  // get user data\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  // check if user's logged in\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token); // handwaiving here\n  }\n\n  // check if token is expired\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n    window.location.assign('/');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    // this will reload the page and reset the state of the application\n    window.location.assign('/');\n  }\n}\n\nexport default new AuthService();\n","export const getSavedBookIds = () => {\n  const savedBookIds = localStorage.getItem('saved_books')\n    ? JSON.parse(localStorage.getItem('saved_books'))\n    : [];\n\n  return savedBookIds;\n};\n\nexport const saveBookIds = (bookIdArr) => {\n  if (bookIdArr.length) {\n    localStorage.setItem('saved_books', JSON.stringify(bookIdArr));\n  } else {\n    localStorage.removeItem('saved_books');\n  }\n};\n\nexport const removeBookId = (bookId) => {\n  const savedBookIds = localStorage.getItem('saved_books')\n    ? JSON.parse(localStorage.getItem('saved_books'))\n    : null;\n\n  if (!savedBookIds) {\n    return false;\n  }\n\n  const updatedSavedBookIds = savedBookIds?.filter((savedBookId) => savedBookId !== bookId);\n  localStorage.setItem('saved_books', JSON.stringify(updatedSavedBookIds));\n\n  return true;\n};","import React, { useState, useEffect } from 'react';\nimport { Jumbotron, Container, Col, Form, Button, Card, CardColumns } from 'react-bootstrap';\n\nimport { SAVE_BOOK } from '../utils/mutations';\nimport Auth from '../utils/auth';\nimport { searchGoogleBooks } from '../utils/API';\nimport { saveBookIds, getSavedBookIds } from '../utils/localStorage';\nimport { useMutation } from '@apollo/client';\n\nconst SearchBooks = () => {\n  // create state for holding returned google api data\n  const [searchedBooks, setSearchedBooks] = useState([]);\n  // create state for holding our search field data\n  const [searchInput, setSearchInput] = useState('');\n  const [saveBook] = useMutation(SAVE_BOOK);\n\n  // create state to hold saved bookId values\n  const [savedBookIds, setSavedBookIds] = useState(getSavedBookIds());\n\n  // set up useEffect hook to save `savedBookIds` list to localStorage on component unmount\n  // learn more here: https://reactjs.org/docs/hooks-effect.html#effects-with-cleanup\n  useEffect(() => {\n    return () => saveBookIds(savedBookIds);\n  });\n\n  // create method to search for books and set state on form submit\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    if (!searchInput) {\n      return false;\n    }\n\n    try {\n      const response = await searchGoogleBooks(searchInput);\n\n      if (!response.ok) {\n        throw new Error('something went wrong!');\n      }\n\n      const { items } = await response.json();\n\n      const bookData = items.map((book) => ({\n        bookId: book.id,\n        authors: book.volumeInfo.authors || ['No author to display'],\n        title: book.volumeInfo.title,\n        description: book.volumeInfo.description,\n        image: book.volumeInfo.imageLinks?.thumbnail || '',\n      }));\n\n      setSearchedBooks(bookData);\n      setSearchInput('');\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  // create function to handle saving a book to our database\n  const handleSaveBook = async (bookId) => {\n    // find the book in `searchedBooks` state by the matching id\n    const bookToSave = searchedBooks.find((book) => book.bookId === bookId);\n\n    // get token\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n      const response = await saveBook(bookToSave, token);\n\n      if (!response.ok) {\n        throw new Error('something went wrong!');\n      }\n\n      // if book successfully saves to user's account, save book id to state\n      setSavedBookIds([...savedBookIds, bookToSave.bookId]);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  return (\n    <>\n      <Jumbotron fluid className='text-light bg-dark'>\n        <Container>\n          <h1>Search for Books!</h1>\n          <Form onSubmit={handleFormSubmit}>\n            <Form.Row>\n              <Col xs={12} md={8}>\n                <Form.Control\n                  name='searchInput'\n                  value={searchInput}\n                  onChange={(e) => setSearchInput(e.target.value)}\n                  type='text'\n                  size='lg'\n                  placeholder='Search for a book'\n                />\n              </Col>\n              <Col xs={12} md={4}>\n                <Button type='submit' variant='success' size='lg'>\n                  Submit Search\n                </Button>\n              </Col>\n            </Form.Row>\n          </Form>\n        </Container>\n      </Jumbotron>\n\n      <Container>\n        <h2>\n          {searchedBooks.length\n            ? `Viewing ${searchedBooks.length} results:`\n            : 'Search for a book to begin'}\n        </h2>\n        <CardColumns>\n          {searchedBooks.map((book) => {\n            return (\n              <Card key={book.bookId} border='dark'>\n                {book.image ? (\n                  <Card.Img src={book.image} alt={`The cover for ${book.title}`} variant='top' />\n                ) : null}\n                <Card.Body>\n                  <Card.Title>{book.title}</Card.Title>\n                  <p className='small'>Authors: {book.authors}</p>\n                  <Card.Text>{book.description}</Card.Text>\n                  {Auth.loggedIn() && (\n                    <Button\n                      disabled={savedBookIds?.some((savedBookId) => savedBookId === book.bookId)}\n                      className='btn-block btn-info'\n                      onClick={() => handleSaveBook(book.bookId)}>\n                      {savedBookIds?.some((savedBookId) => savedBookId === book.bookId)\n                        ? 'This book has already been saved!'\n                        : 'Save this Book!'}\n                    </Button>\n                  )}\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </CardColumns>\n      </Container>\n    </>\n  );\n};\n\nexport default SearchBooks;\n","// route to get logged in user's info (needs the token)\nexport const getMe = (token) => {\n  return fetch('/api/users/me', {\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Bearer ${token}`,\n    },\n  });\n};\n\nexport const createUser = (userData) => {\n  return fetch('/api/users', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(userData),\n  });\n};\n\nexport const loginUser = (userData) => {\n  return fetch('/api/users/login', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(userData),\n  });\n};\n\n// save book data for a logged in user\nexport const saveBook = (bookData, token) => {\n  return fetch('/api/users', {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Bearer ${token}`,\n    },\n    body: JSON.stringify(bookData),\n  });\n};\n\n// remove saved book data for a logged in user\nexport const deleteBook = (bookId, token) => {\n  return fetch(`/api/users/books/${bookId}`, {\n    method: 'DELETE',\n    headers: {\n      authorization: `Bearer ${token}`,\n    },\n  });\n};\n\n// make a search to google books api\n// https://www.googleapis.com/books/v1/volumes?q=harry+potter\nexport const searchGoogleBooks = (query) => {\n  return fetch(`https://www.googleapis.com/books/v1/volumes?q=${query}`);\n};\n","import { gql } from \"@apollo/client\";\n\nexport const GET_ME = gql`\n  query me {\n    me {\n      _id\n      username\n      email\n      bookCount\n      savedBooks {\n        bookId\n        authors\n        description\n        title\n        image\n        link\n      }\n    }\n  }\n`;\n","import React from 'react';\nimport { Jumbotron, Container, CardColumns, Card, Button } from 'react-bootstrap';\nimport { useMutation, useQuery } from \"@apollo/client\";\nimport { GET_ME } from '../utils/queries';\nimport Auth from '../utils/auth';\nimport { removeBookId } from '../utils/localStorage';\nimport { REMOVE_BOOK } from '../utils/mutations';\n\nconst SavedBooks = () => {\n  const { loading, data } = useQuery(GET_ME);\n  let userData = data?.me || {};\n  const [removeBook] = useMutation(REMOVE_BOOK);\n\n  // create function that accepts the book's mongo _id value as param and deletes the book from the database\n  const handleDeleteBook = async (bookId) => {\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n      const { data } = await removeBook({ variables: {bookId} });\n\n      if (!data) {\n        throw new Error('something went wrong!');\n      }\n\n      // upon success, remove book's id from localStorage\n      removeBookId(bookId);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n\n\n  // if data isn't here yet, say so\n  if (loading) {\n    return <h2>LOADING...</h2>\n  }\n  return (\n    <>\n      <Jumbotron fluid className='text-light bg-dark'>\n        <Container>\n          <h1>Viewing saved books!</h1>\n        </Container>\n      </Jumbotron>\n      <Container>\n        <h2>\n          {userData.savedBooks.length\n            ? `Viewing ${userData.savedBooks.length} saved ${userData.savedBooks.length === 1 ? 'book' : 'books'}:`\n            : 'You have no saved books!'}\n        </h2>\n        <CardColumns>\n          {userData.savedBooks.map((book) => {\n            return (\n              <Card key={book.bookId} border='dark'>\n                {book.image ? <Card.Img src={book.image} alt={`The cover for ${book.title}`} variant='top' /> : null}\n                <Card.Body>\n                  <Card.Title>{book.title}</Card.Title>\n                  <p className='small'>Authors: {book.authors}</p>\n                  <Card.Text>{book.description}</Card.Text>\n                  <Button className='btn-block btn-danger' onClick={() => handleDeleteBook(book.bookId)}>\n                    Delete this Book!\n                  </Button>\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </CardColumns>\n      </Container>\n    </>\n  );\n};\n\nexport default SavedBooks;\n","import React, { useState } from 'react';\nimport { Form, Button, Alert } from 'react-bootstrap';\nimport { ADD_USER } from '../utils/mutations';\nimport { useMutation } from \"@apollo/client\";\nimport Auth from '../utils/auth';\n\nconst SignupForm = () => {\n  // set initial form state\n  const [userFormData, setUserFormData] = useState({ username: '', email: '', password: '' });\n  // set state for form validation\n  const [validated] = useState(false);\n  // set state for alert\n  const [showAlert, setShowAlert] = useState(false);\n  const [addUser] = useMutation(ADD_USER);\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    // check if form has everything (as per react-bootstrap docs)\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    try {\n      const { data } =  await addUser({ variables: {...userFormData } });\n\n      if (!data) {\n        throw new Error('something went wrong!');\n      }\n\n      Auth.login(data.addUser.token);\n  \n    } catch (err) {\n      console.error(err);\n      setShowAlert(true);\n    }\n\n    setUserFormData({\n      username: '',\n      email: '',\n      password: '',\n    });\n  };\n\n  return (\n    <>\n      {/* This is needed for the validation functionality above */}\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        {/* show alert if server response is bad */}\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\n          Something went wrong with your signup!\n        </Alert>\n\n        <Form.Group>\n          <Form.Label htmlFor='username'>Username</Form.Label>\n          <Form.Control\n            type='text'\n            placeholder='Your username'\n            name='username'\n            onChange={handleInputChange}\n            value={userFormData.username}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Username is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='email'>Email</Form.Label>\n          <Form.Control\n            type='email'\n            placeholder='Your email address'\n            name='email'\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='password'>Password</Form.Label>\n          <Form.Control\n            type='password'\n            placeholder='Your password'\n            name='password'\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\n        </Form.Group>\n        <Button\n          disabled={!(userFormData.username && userFormData.email && userFormData.password)}\n          type='submit'\n          variant='success'>\n          Submit\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nexport default SignupForm;\n","// see SignupForm.js for comments\nimport React, { useState } from 'react';\nimport { Form, Button, Alert } from 'react-bootstrap';\nimport Auth from '../utils/auth';\nimport { useMutation } from '@apollo/client';\nimport { LOGIN_USER } from '../utils/mutations';\n\nconst LoginForm = () => {\n  const [userFormData, setUserFormData] = useState({ email: '', password: '' });\n  const [validated] = useState(false);\n  const [showAlert, setShowAlert] = useState(false);\n  const [login] = useMutation(LOGIN_USER);\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    // check if form has everything (as per react-bootstrap docs)\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    try {\n      const { data } = await login({ variables: { ...userFormData}});\n\n      if (!data) {\n        throw new Error('something went wrong!');\n      }\n\n      Auth.login(data.login.token);\n    } catch (err) {\n      console.error(err);\n      setShowAlert(true);\n    }\n\n    setUserFormData({\n      username: '',\n      email: '',\n      password: '',\n    });\n  };\n\n  return (\n    <>\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\n          Something went wrong with your login credentials!\n        </Alert>\n        <Form.Group>\n          <Form.Label htmlFor='email'>Email</Form.Label>\n          <Form.Control\n            type='text'\n            placeholder='Your email'\n            name='email'\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='password'>Password</Form.Label>\n          <Form.Control\n            type='password'\n            placeholder='Your password'\n            name='password'\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\n        </Form.Group>\n        <Button\n          disabled={!(userFormData.email && userFormData.password)}\n          type='submit'\n          variant='success'>\n          Submit\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nexport default LoginForm;\n","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Navbar, Nav, Container, Modal, Tab } from 'react-bootstrap';\nimport SignUpForm from './SignupForm';\nimport LoginForm from './LoginForm';\n\nimport Auth from '../utils/auth';\n\nconst AppNavbar = () => {\n  // set modal display state\n  const [showModal, setShowModal] = useState(false);\n\n  return (\n    <>\n      <Navbar bg='dark' variant='dark' expand='lg'>\n        <Container fluid>\n          <Navbar.Brand as={Link} to='/'>\n            Google Books Search\n          </Navbar.Brand>\n          <Navbar.Toggle aria-controls='navbar' />\n          <Navbar.Collapse id='navbar'>\n            <Nav className='ml-auto'>\n              <Nav.Link as={Link} to='/'>\n                Search For Books\n              </Nav.Link>\n              {/* if user is logged in show saved books and logout */}\n              {Auth.loggedIn() ? (\n                <>\n                  <Nav.Link as={Link} to='/saved'>\n                    See Your Books\n                  </Nav.Link>\n                  <Nav.Link onClick={Auth.logout}>Logout</Nav.Link>\n                </>\n              ) : (\n                <Nav.Link onClick={() => setShowModal(true)}>Login/Sign Up</Nav.Link>\n              )}\n            </Nav>\n          </Navbar.Collapse>\n        </Container>\n      </Navbar>\n      {/* set modal data up */}\n      <Modal\n        size='lg'\n        show={showModal}\n        onHide={() => setShowModal(false)}\n        aria-labelledby='signup-modal'>\n        {/* tab container to do either signup or login component */}\n        <Tab.Container defaultActiveKey='login'>\n          <Modal.Header closeButton>\n            <Modal.Title id='signup-modal'>\n              <Nav variant='pills'>\n                <Nav.Item>\n                  <Nav.Link eventKey='login'>Login</Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                  <Nav.Link eventKey='signup'>Sign Up</Nav.Link>\n                </Nav.Item>\n              </Nav>\n            </Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <Tab.Content>\n              <Tab.Pane eventKey='login'>\n                <LoginForm handleModalClose={() => setShowModal(false)} />\n              </Tab.Pane>\n              <Tab.Pane eventKey='signup'>\n                <SignUpForm handleModalClose={() => setShowModal(false)} />\n              </Tab.Pane>\n            </Tab.Content>\n          </Modal.Body>\n        </Tab.Container>\n      </Modal>\n    </>\n  );\n};\n\nexport default AppNavbar;\n","import React from \"react\";\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\nimport SearchBooks from \"./pages/SearchBooks\";\nimport SavedBooks from \"./pages/SavedBooks\";\nimport Navbar from \"./components/Navbar\";\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  createHttpLink,\n} from \"@apollo/client\";\nimport { setContext } from \"@apollo/client/link/context\";\n\nconst httpLink = createHttpLink({\n  uri: \"/graphql\",\n});\n\nconst authLink = setContext((_, { headers }) => {\n  const token = localStorage.getItem(\"id_token\");\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : \"\",\n    },\n  };\n});\n\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <>\n          <Navbar />\n          <Routes>\n            <Route path=\"/\" element={<SearchBooks />} />\n            <Route path=\"/saved\" element={<SavedBooks />} />\n            <Route\n              path=\"*\"\n              element={<h1 className=\"display-2\">Wrong page!</h1>}\n            />\n          </Routes>\n        </>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}